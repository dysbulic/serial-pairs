/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RecordingsTrackerInterface extends Interface {
  getFunction(
    nameOrSignature: "getMessage" | "messages" | "postUpgrade" | "setMessage"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MessageChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "getMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messages",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "postUpgrade", values: [string]): string;
  encodeFunctionData(functionFragment: "setMessage", values: [string]): string;

  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMessage", data: BytesLike): Result;
}

export namespace MessageChangedEvent {
  export type InputTuple = [user: AddressLike, message: string];
  export type OutputTuple = [user: string, message: string];
  export interface OutputObject {
    user: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RecordingsTracker extends BaseContract {
  connect(runner?: ContractRunner | null): RecordingsTracker;
  waitForDeployment(): Promise<this>;

  interface: RecordingsTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMessage: TypedContractMethod<[], [string], "view">;

  messages: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  postUpgrade: TypedContractMethod<[prefix: string], [void], "nonpayable">;

  setMessage: TypedContractMethod<[message: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMessage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "messages"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "postUpgrade"
  ): TypedContractMethod<[prefix: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMessage"
  ): TypedContractMethod<[message: string], [void], "nonpayable">;

  getEvent(
    key: "MessageChanged"
  ): TypedContractEvent<
    MessageChangedEvent.InputTuple,
    MessageChangedEvent.OutputTuple,
    MessageChangedEvent.OutputObject
  >;

  filters: {
    "MessageChanged(address,string)": TypedContractEvent<
      MessageChangedEvent.InputTuple,
      MessageChangedEvent.OutputTuple,
      MessageChangedEvent.OutputObject
    >;
    MessageChanged: TypedContractEvent<
      MessageChangedEvent.InputTuple,
      MessageChangedEvent.OutputTuple,
      MessageChangedEvent.OutputObject
    >;
  };
}
